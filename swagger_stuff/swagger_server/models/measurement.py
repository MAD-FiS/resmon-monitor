# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.value import Value  # noqa: F401,E501
from swagger_server import util


class Measurement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, metric_id: str=None, values: List[Value]=None):  # noqa: E501
        """Measurement - a model defined in Swagger

        :param metric_id: The metric_id of this Measurement.  # noqa: E501
        :type metric_id: str
        :param values: The values of this Measurement.  # noqa: E501
        :type values: List[Value]
        """
        self.swagger_types = {
            'metric_id': str,
            'values': List[Value]
        }

        self.attribute_map = {
            'metric_id': 'metric_id',
            'values': 'values'
        }

        self._metric_id = metric_id
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'Measurement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Measurement of this Measurement.  # noqa: E501
        :rtype: Measurement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_id(self) -> str:
        """Gets the metric_id of this Measurement.


        :return: The metric_id of this Measurement.
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id: str):
        """Sets the metric_id of this Measurement.


        :param metric_id: The metric_id of this Measurement.
        :type metric_id: str
        """

        self._metric_id = metric_id

    @property
    def values(self) -> List[Value]:
        """Gets the values of this Measurement.


        :return: The values of this Measurement.
        :rtype: List[Value]
        """
        return self._values

    @values.setter
    def values(self, values: List[Value]):
        """Sets the values of this Measurement.


        :param values: The values of this Measurement.
        :type values: List[Value]
        """

        self._values = values
