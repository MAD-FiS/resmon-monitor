# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Dummy(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, hostname=None, metric_id=None, description=None, length=None, frequency=None):  # noqa: E501
        """Dummy - a model defined in Swagger

        :param hostname: The hostname of this Dummy.  # noqa: E501
        :type hostname: str
        :param metric_id: The metric_id of this Dummy.  # noqa: E501
        :type metric_id: str
        :param description: The description of this Dummy.  # noqa: E501
        :type description: str
        :param length: The length of this Dummy.  # noqa: E501
        :type length: int
        :param frequency: The frequency of this Dummy.  # noqa: E501
        :type frequency: int
        """
        self.swagger_types = {
            'hostname': str,
            'metric_id': str,
            'description': str,
            'length': int,
            'frequency': int
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'metric_id': 'metric_id',
            'description': 'description',
            'length': 'length',
            'frequency': 'frequency'
        }

        self._hostname = hostname
        self._metric_id = metric_id
        self._description = description
        self._length = length
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt) -> 'Dummy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dummy of this Dummy.  # noqa: E501
        :rtype: Dummy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self) -> str:
        """Gets the hostname of this Dummy.


        :return: The hostname of this Dummy.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: str):
        """Sets the hostname of this Dummy.


        :param hostname: The hostname of this Dummy.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def metric_id(self) -> str:
        """Gets the metric_id of this Dummy.


        :return: The metric_id of this Dummy.
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id: str):
        """Sets the metric_id of this Dummy.


        :param metric_id: The metric_id of this Dummy.
        :type metric_id: str
        """

        self._metric_id = metric_id

    @property
    def description(self) -> str:
        """Gets the description of this Dummy.


        :return: The description of this Dummy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Dummy.


        :param description: The description of this Dummy.
        :type description: str
        """

        self._description = description

    @property
    def length(self) -> int:
        """Gets the length of this Dummy.


        :return: The length of this Dummy.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length: int):
        """Sets the length of this Dummy.


        :param length: The length of this Dummy.
        :type length: int
        """

        self._length = length

    @property
    def frequency(self) -> int:
        """Gets the frequency of this Dummy.


        :return: The frequency of this Dummy.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this Dummy.


        :param frequency: The frequency of this Dummy.
        :type frequency: int
        """

        self._frequency = frequency
